https://www.cnblogs.com/xuwendong/p/10319474.html
桥接模式     结构性模式
    桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。
桥接模式的结构
    ●Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有关联关系，
    它既可以包含抽象业务方法，也可以包含具体业务方法。

    ●RefinedAbstraction（扩充抽象类）：扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。

    ●Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，
    而Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，
    使用关联关系来替代继承关系。

    ●ConcreteImplementor（具体实现类）：具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将替换其父类对象，提供给抽象类具体的业务操作方法。
桥接模式使用场景
    当对象存在多种变化的因素时，考虑对其变化的因素和场景进行抽象，然后进行桥接；如笔拥有不同的功能。
    当多个对象存在多种变化的因素时，考虑将这部分变化的部分抽象出来再聚合进来；比如不同品牌的电脑安装不同的系统、使用不同的软件等，相当于将第一条进行横向扩展，增加桥接的数量。
桥接模式优缺点
    优点
       (1)分离抽象接口及其实现部分。桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自维度的变化，也就是说抽象和实现不再在同一个继承层次结构中，而是“子类化”它们，使它们各自都具有自己的子类，以便任何组合子类，从而获得多维度组合对象。
       (2)在很多情况下，桥接模式可以取代多层继承方案，多层继承方案违背了“单一职责原则”，复用性较差，且类的个数非常多，桥接模式是比多层继承方案更好的解决方法，它极大减少了子类的个数。
       (3)桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，符合“开闭原则”。
    缺点
       (1)桥接模式的使用会增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。
       (2)桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性，如何正确识别两个独立维度也需要一定的经验积累。
装饰，桥接和适配器模式的异同
    三者都是结构型的设计模式，而且都存在依赖抽象的情况
    适配器模式：
    重点强调的是适配的功能。（适配器依赖抽象）
    关键点是：
    ·        主体类和适配器类实现相同的接口A
    ·        主体类依赖适配器类
    ·        适配器类依赖抽象接口B
    ·        被适配的类实现抽象接口B
    最终的效果就是，主体类可以使用之前不相关的被适配类中的某些功能。

    桥接模式：
    重点强调的是多维度的变化。（主体类直接依赖抽象）
    关键点是：
    ·        主体类依赖抽象A
    ·        主体类具有多个不同的实现类
    ·        抽象A具有多个不同的实现类
    最终的效果就是，主体类的实现类和抽象的实现类分别可以在两个维度上进行各自的变化。如果主体类依赖多个抽象，则维度进行增加，方便扩展。

    装饰器模式：
    重点强调的是装饰功能。（主体类不仅依赖抽象，而且实现该抽象接口）
    关键点是：
    ·        抽象A具有多个具体子类
    ·        装饰器类依赖抽象A
    ·        装饰器类实现抽象A
    ·        装饰器类存在不同子类
    最终的效果就是，（装饰器实现类）对（原抽象的子类）进行某些方法的功能加强。
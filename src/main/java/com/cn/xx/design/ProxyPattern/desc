设计模式代理模式    结构性模式
https://www.cnblogs.com/qdhxhz/p/9241412.html


什么是代理模式
  1，代理模式由三个元素共同构成
      1：一个接口，接口中的方法是要真正去实现的
      2：被代理类，实现上述接口，这是真正去执行接口中方法的类
      3：代理类，同样实现上述接口，同时封装被代理对象，帮助被代理类去实现方法

  2，使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加"前置通知"和后置处理
    （如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。
  3，图：代理模式1

静态代理
  假如一个班的同学要向老师交班费，但是都是通过班长把自己的钱转交给老师。这里，班长就是代理类（代理学生上交班费），学生就是被代理类或者理解为目标类。

动态代理
  动态代理类是如何创建的
    1）第一步已经获得了代理对象，代理对象的名称是：$Proxy0
    (2）第二步我们发现代理类的构造函数需要传入一个java.lang.reflect.InvocationHandler类
    （3）第三步通过构造函数创建对象，构造函数里放到就是HWInvocationHandler类，而它是实现InvocationHandler接口的，所以没毛病。
    总的来讲这三步都是通过类的反射机制来实现创建类的。

动态代理五大步骤
  1）通过实现InvocationHandler接口来自定义自己的InvocationHandler;
   2）通过Proxy.getProxyClass获得动态代理类
   3）通过反射机制获得代理类的构造方法，方法签名为getConstructor(InvocationHandler.class)
   4）通过构造函数获得代理对象并将自定义的InvocationHandler实例对象传为参数传入
        5）通过代理对象调用目标方法